"""
Django settings for project_piss project.

Generated by 'django-admin startproject' using Django 2.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
import sys

from decouple import config

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
from datetime import timedelta

from googleplaces import GooglePlaces
from google.cloud import logging

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# App Variables

IS_TESTING = 'test' in sys.argv
if IS_TESTING:
    PAGINATION_SIZE = 5
    MAX_REPORT_COUNT = 1
else:
    PAGINATION_SIZE = 1000
    MAX_REPORT_COUNT = 50
VERSIONS = {
    "latest": config('APP_VERSION'),
    "latest_code": config('APP_VERSION_CODE'),
    "min": config('APP_LOWEST_VERSION'),
    "min_code": config('APP_LOWEST_VERSION_CODE')
}

SOCIAL_AUTH_APP_ID = {
    'fb': config('FB_APP_ID')
}

SOCIAL_AUTH_SECRET_KEY = {
    'fb': config('FB_SECRET_KEY')
}

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_USE_TLS = True
EMAIL_HOST = 'smtp.sendgrid.net'
EMAIL_HOST_USER = 'apikey'
DEFAULT_FROM_EMAIL = 'support_email'
# EMAIL_HOST_PASSWORD = os.environ.get("gmail_pwd", "Pr0j3ctP1ss")
EMAIL_HOST_PASSWORD = "email_host_password"
EMAIL_PORT = 587
MAX_ACTIVATION_ATTEMPTS = 3
ACTIVATION_DELAY_SECONDS = 3600
MAPS_API_KEY = os.environ.get("maps_key", "maps_key")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'secret_key'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'rest_framework',
    'home',
    'web',
    'professors',
    'colleges',
    'rest_framework.authtoken',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'djoser',
    'social_django',
    'rest_social_auth',
    'whitenoise.runserver_nostatic',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

ROOT_URLCONF = 'project_piss.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project_piss.wsgi.application'


#Logging configs
# StackDriver setup
client = logging.Client()
# Connects the logger to the root logging handler; by default
# this captures all logs at INFO level and higher
client.setup_logging()

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'service-logger-format': {
            'format': '%(asctime)s NMS %(thread)d %(levelname)s %(filename)s %(funcName)s %(lineno)4s: %(message)s'
        }
    },
    'handlers': {
        'service-log-file': {
            'level': 'INFO',
            'class': 'concurrent_log_handler.ConcurrentRotatingFileHandler',  # Allows for size based rotation of log file
            'filename': 'project-piss.log',
            'mode': 'a',
            'maxBytes': 100*1024*1024, #Size in bytes - 100 MB
            'backupCount': 10,
            'formatter': 'service-logger-format',
        },
        # 'stackdriver': {
        #     'class': 'google.cloud.logging.handlers.CloudLoggingHandler',
        #     # 'client': client
        # }
    },
    'loggers': {
        'project-piss': {
                    'handlers': ['service-log-file'],
                    'level': 'INFO',
                    'propagate': True,
                },
        # 'google-cloud-logger': {
        #             'handlers': ['stackdriver'],
        #             'level': 'INFO'
        #         }
    },
}


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases
#AWS Settings
if 'RDS_DB_NAME' in os.environ:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': os.environ['RDS_DB_NAME'],
            'USER': os.environ['RDS_USERNAME'],
            'PASSWORD': os.environ['RDS_PASSWORD'],
            'HOST': os.environ['RDS_HOSTNAME'],
            'PORT': os.environ['RDS_PORT'],
            'OPTIONS': {
                'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            },
        }
    }

#G-Cloud settings
elif os.getenv('GAE_APPLICATION', None):
    # Running on production App Engine, so connect to Google Cloud SQL using
    # the unix socket at /cloudsql/<your-cloudsql-connection string>
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'HOST': config('GC_HOST'),
            'USER': config('GC_USER'),
            'PASSWORD': config('GC_PASSWORD'),
            'NAME': config('GC_DATABASE'),
        }
}

else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }

SILENCED_SYSTEM_CHECKS = ['mysql.E001']


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': PAGINATION_SIZE,
}


# JWT Settings
JWT_AUTH = {
    'JWT_EXPIRATION_DELTA': timedelta(days=1000),
    'JWT_ALLOW_REFRESH': True,
    'JWT_RESPONSE_PAYLOAD_HANDLER': 'home.views.jwt_response_payload_handler',
    'JWT_PAYLOAD_GET_USER_ID_HANDLER': 'rest_framework_jwt.utils.jwt_get_user_id_from_payload_handler',
}


# djoser settings
DJOSER = {
    'SERIALIZERS': {
        # 'user_create': 'home.serializers.UserSerializer',
        # 'user': 'home.serializers.UserSerializer'
    },
    'PASSWORD_RESET_CONFIRM_URL': '#/password/reset/confirm/{uid}/{token}',
    'PASSWORD_RESET_SHOW_EMAIL_NOT_FOUND': True,
    'LOGOUT_ON_PASSWORD_CHANGE': True,
    'TOKEN_MODEL': 'rest_framework.authtoken.models.Token'

}

AUTHENTICATION_BACKENDS = (
    'social_core.backends.facebook.FacebookOAuth2',
    'social_core.backends.open_id.OpenIdAuth',
    # 'social_core.backends.google.GooglePlusAuth',
    'social_core.backends.google.GoogleOAuth2',
    'django.contrib.auth.backends.ModelBackend',
 )

TEMPLATE_DIRS = ('/path/to/psa_test/thirdauth/templates/',)

# REST_SOCIAL_OAUTH_REDIRECT_URI = '/api/'
# REST_SOCIAL_DOMAIN_FROM_ORIGIN = True

FIREBASE = {
    'apiKey': config('FIREBASE_APIKEY'),
    'authDomain': config('FIREBASE_AUTH_DOMAIN'),
    'databaseURL': config('FIREBASE_DATABASE_URL'),
    'projectId': config('FIREBASE_PROJECT_ID'),
    'storageBucket': config('FIREBASE_STORAGE_BUCKET'),
    'messagingSenderId': config('FIREBASE_MESSAGE_ID'),
    'serviceAccount': os.path.join(BASE_DIR, 'project_piss/piss-firebase-key.json')
}
# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, "static")

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
)


# Google maps api initialisation

API_KEY = MAPS_API_KEY
google_places = GooglePlaces(API_KEY)

SOCIAL_AUTH_URL_NAMESPACE = "social"
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY ="g-auth-key"
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = "g-auth-secret"
SOCIAL_AUTH_GOOGLE_PLUS_KEY="g-plus-key"


SOCIAL_AUTH_PIPELINE = (
    'social.pipeline.social_auth.social_details',
    'social.pipeline.social_auth.social_uid',
    'social.pipeline.social_auth.auth_allowed',
    'social.pipeline.social_auth.associate_by_email',
    'social.pipeline.social_auth.social_user',
    'social.pipeline.user.get_username',
    'social.pipeline.user.create_user',
    'social.pipeline.social_auth.associate_user',
    'social.pipeline.social_auth.load_extra_data',
    'social.pipeline.user.user_details'
)

